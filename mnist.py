# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/daymmm/daymmm/blob/main/mnist.ipynb
"""



import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Flatten
from sklearn.metrics import accuracy_score

#flatten makes (28,28) into (784,)

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

x_train[0]

x_train.shape

x_test.shape

y_test

plt.imshow(x_test[0])

x_test=x_test/255
x_train=x_train/255

x_train[0]

model=Sequential()
model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy')

history=model.fit(x_train, y_train, epochs=10,validation_split=0.2)

y_pr=model.predict(x_test)

y_pred=y_pr.argmax(axis=1)

accuracy_score(y_test,y_pred)

for i in range(1):
    plt.imshow(x_test[i], cmap='gray')
    plt.title(f"Actual: {y_test[i]}, Predicted: {y_pred[i]}")
    plt.axis('off')
    plt.show()

index = 2

plt.imshow(x_test[index], cmap='gray')
plt.title(f"Actual: {y_test[index]}, Predicted: {y_pred[index]}")
plt.axis('off')
plt.show()

plt.plot(history.history['loss'], label='Training Loss', color='blue')
plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit